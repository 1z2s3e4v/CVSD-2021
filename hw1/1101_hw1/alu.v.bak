module alu (
    input               i_clk,
    input               i_rst_n,
    input               i_valid,
    input signed [11:0] i_data_a,
    input signed [11:0] i_data_b,
    input        [2:0]  i_inst,
    output              o_valid,
    output       [11:0] o_data,
    output              o_overflow
);
    
// ---------------------------------------------------------------------------
// Wires and Registers
// ---------------------------------------------------------------------------
reg  [11:0] o_data_w, o_data_r;
reg         o_valid_w, o_valid_r;
reg         o_overflow_w, o_overflow_r;
// ---- Add your own wires and registers here if needed ---- //
reg  [11:0] data_old;
reg	 [11:0] data_add, data_sub, data_muilti, data_mac, data_xnor, data_relu, data_mean, data_absMax;


// ---------------------------------------------------------------------------
// Continuous Assignment
// ---------------------------------------------------------------------------
assign o_valid = o_valid_r;
assign o_data = o_data_r;
assign o_overflow = o_overflow_r;
// ---- Add your own wire data assignments here if needed ---- //




// ---------------------------------------------------------------------------
// Combinational Blocks
// ---------------------------------------------------------------------------
// ---- Write your conbinational block design here ---- //
always@(*) begin
    //o_data_w = ;
    //o_overflow_w = ;
    //o_valid_w = ;
	case(i_inst)
		3'b000: 
			o_data_r = data_add;
		3'b001: 
			o_data_r = data_sub;
		3'b010: 
			o_data_r = data_multi;
		3'b011: 
			o_data_r = data_mac;
		3'b100: 
			o_data_r = data_xnor;
		3'b101: 
			o_data_r = data_relu;
		3'b110: 
			o_data_r = data_mean;
		3'b111: 
			o_data_r = data_absMax;
	endcase
end

always@(*) begin // add
	data_add = i_data_a + i_data_b;
	if((i_data_a[7] == 1'b1 || i_data_a[7] == 1'b1) && data_add[7] == 1'b0) begin
		overflow_add = 1'b1;
	end
end


// ---------------------------------------------------------------------------
// Sequential Block
// ---------------------------------------------------------------------------
// ---- Write your sequential block design here ---- //
always@(posedge i_clk or negedge i_rst_n) begin
    if(!i_rst_n) begin
        o_data_r <= 0;
        o_overflow_r <= 0;
        o_valid_r <= 0;
    end else begin
        o_data_r <= o_data_w;
        o_overflow_r <= o_overflow_w;
        o_valid_r <= o_valid_w;
    end
end

always@(negedge i_clk) begin
	if(i_valid) begin
		o_valid_w <= 0;
	end
end

endmodule
